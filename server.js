/**
 * Dan Data Node Server
 * Server ph·ª• ƒë·ªÉ l∆∞u tr·ªØ v√† stream media files cho h·ªá th·ªëng KD
 */

import express from 'express';
import { createServer } from 'http';
import { io as ioClient } from 'socket.io-client';
import cors from 'cors';
import dotenv from 'dotenv';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { existsSync } from 'fs';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;
const STORAGE_PATH = process.env.STORAGE_PATH || path.join(__dirname, 'storage');

// Middleware
app.use(cors());
app.use(express.json({ limit: '500mb' }));
app.use(express.urlencoded({ extended: true, limit: '500mb' }));

// T·∫°o th∆∞ m·ª•c storage n·∫øu ch∆∞a c√≥
await ensureStorageDirectory();

async function ensureStorageDirectory() {
  try {
    if (!existsSync(STORAGE_PATH)) {
      await fs.mkdir(STORAGE_PATH, { recursive: true });
      console.log('‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c storage:', STORAGE_PATH);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c storage:', error);
  }
}

// Socket.IO client ƒë·ªÉ k·∫øt n·ªëi v·ªõi server ch√≠nh
let mainServerSocket = null;
let nodeId = null;
let isConnected = false;

/**
 * K·∫øt n·ªëi t·ªõi server ch√≠nh
 */
async function connectToMainServer(host, port, nodeName) {
  try {
    const serverUrl = `http://${host}:${port}`;
    
    console.log(`üîå ƒêang k·∫øt n·ªëi t·ªõi server ch√≠nh: ${serverUrl}`);
    
    mainServerSocket = ioClient(serverUrl, {
      path: '/data-node-socket',
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionAttempts: 10
    });
    
    mainServerSocket.on('connect', () => {
      console.log('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server ch√≠nh');
      
      // ƒêƒÉng k√Ω data node
      mainServerSocket.emit('register', {
        port: PORT,
        name: nodeName
      }, (response) => {
        if (response.success) {
          nodeId = response.nodeId;
          isConnected = true;
          console.log(`‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Node ID: ${nodeId}`);
          
          // B·∫Øt ƒë·∫ßu g·ª≠i heartbeat
          startHeartbeat();
          
          // G·ª≠i th√¥ng tin storage
          updateStorageInfo();
        } else {
          console.error('‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i:', response.error);
          process.exit(1);
        }
      });
    });
    
    mainServerSocket.on('disconnect', () => {
      console.log('üîå M·∫•t k·∫øt n·ªëi v·ªõi server ch√≠nh');
      isConnected = false;
    });
    
    mainServerSocket.on('connect_error', (error) => {
      console.error('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
    });
    
    // L·∫Øng nghe s·ª± ki·ªán upload file
    mainServerSocket.on('upload_file', async (data, callback) => {
      try {
        console.log('üì• Nh·∫≠n y√™u c·∫ßu upload file:', data.fileName);
        
        const result = await handleFileUpload(data);
        
        callback({
          success: true,
          ...result
        });
        
        // C·∫≠p nh·∫≠t storage info sau khi upload
        await updateStorageInfo();
        
      } catch (error) {
        console.error('‚ùå L·ªói khi upload file:', error);
        callback({
          success: false,
          error: error.message
        });
      }
    });
    
    // L·∫Øng nghe s·ª± ki·ªán x√≥a file
    mainServerSocket.on('delete_file', async (data, callback) => {
      try {
        console.log('üóëÔ∏è  Nh·∫≠n y√™u c·∫ßu x√≥a file:', data.filePath);
        
        await handleFileDelete(data.filePath);
        
        callback({
          success: true,
          message: 'ƒê√£ x√≥a file th√†nh c√¥ng'
        });
        
        // C·∫≠p nh·∫≠t storage info sau khi x√≥a
        await updateStorageInfo();
        
      } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a file:', error);
        callback({
          success: false,
          error: error.message
        });
      }
    });
    
    // L·∫Øng nghe y√™u c·∫ßu l·∫•y storage info
    mainServerSocket.on('get_storage_info', async (data, callback) => {
      try {
        const storageInfo = await getStorageInfo();
        callback({
          success: true,
          data: storageInfo
        });
      } catch (error) {
        callback({
          success: false,
          error: error.message
        });
      }
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi server ch√≠nh:', error);
    throw error;
  }
}

/**
 * G·ª≠i heartbeat ƒë·ªãnh k·ª≥
 */
function startHeartbeat() {
  setInterval(() => {
    if (mainServerSocket && isConnected) {
      mainServerSocket.emit('heartbeat', (response) => {
        if (response && response.success) {
          // console.log('üíì Heartbeat OK');
        }
      });
    }
  }, 30000); // M·ªói 30 gi√¢y
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin storage
 */
async function updateStorageInfo() {
  try {
    const storageInfo = await getStorageInfo();
    
    if (mainServerSocket && isConnected) {
      mainServerSocket.emit('storage_update', {
        storageUsed: storageInfo.used,
        storageTotal: storageInfo.total
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t storage info:', error);
  }
}

/**
 * L·∫•y th√¥ng tin storage
 */
async function getStorageInfo() {
  try {
    const used = await getDirectorySize(STORAGE_PATH);
    
    // L·∫•y t·ªïng dung l∆∞·ª£ng ·ªï ƒëƒ©a (gi·∫£ ƒë·ªãnh 100GB, c√≥ th·ªÉ d√πng th∆∞ vi·ªán ƒë·ªÉ l·∫•y ch√≠nh x√°c)
    const total = 100 * 1024 * 1024 * 1024; // 100GB
    
    return {
      used,
      total,
      available: total - used,
      path: STORAGE_PATH
    };
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y storage info:', error);
    return {
      used: 0,
      total: 0,
      available: 0,
      path: STORAGE_PATH
    };
  }
}

/**
 * T√≠nh k√≠ch th∆∞·ªõc th∆∞ m·ª•c
 */
async function getDirectorySize(dirPath) {
  let size = 0;
  
  try {
    const files = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const file of files) {
      const filePath = path.join(dirPath, file.name);
      
      if (file.isDirectory()) {
        size += await getDirectorySize(filePath);
      } else {
        const stats = await fs.stat(filePath);
        size += stats.size;
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t√≠nh k√≠ch th∆∞·ªõc th∆∞ m·ª•c:', error);
  }
  
  return size;
}

/**
 * X·ª≠ l√Ω upload file
 */
async function handleFileUpload(data) {
  const { matchId, fileName, fileType, fileSize, fileData, section, questionOrder } = data;
  
  // T·∫°o th∆∞ m·ª•c cho match
  const matchDir = path.join(STORAGE_PATH, `match_${matchId}`);
  await fs.mkdir(matchDir, { recursive: true });
  
  // T·∫°o t√™n file unique
  const timestamp = Date.now();
  const ext = path.extname(fileName);
  const baseName = path.basename(fileName, ext);
  const uniqueFileName = `${section}_${questionOrder}_${timestamp}${ext}`;
  
  const filePath = path.join(matchDir, uniqueFileName);
  
  // L∆∞u file
  const buffer = Buffer.from(fileData, 'base64');
  await fs.writeFile(filePath, buffer);
  
  console.log(`‚úÖ ƒê√£ l∆∞u file: ${filePath} (${fileSize} bytes)`);
  
  // T·∫°o stream URL
  const streamUrl = `http://localhost:${PORT}/stream/match_${matchId}/${uniqueFileName}`;
  
  return {
    filePath: filePath,
    streamUrl: streamUrl,
    storagePath: `match_${matchId}/${uniqueFileName}`,
    fileSize: fileSize
  };
}

/**
 * X·ª≠ l√Ω x√≥a file
 */
async function handleFileDelete(filePath) {
  const fullPath = path.join(STORAGE_PATH, filePath);
  
  if (existsSync(fullPath)) {
    await fs.unlink(fullPath);
    console.log(`‚úÖ ƒê√£ x√≥a file: ${fullPath}`);
  } else {
    throw new Error('File kh√¥ng t·ªìn t·∫°i');
  }
}

// Routes

/**
 * GET /
 * Health check
 */
app.get('/', (req, res) => {
  res.json({
    status: 'online',
    nodeId: nodeId,
    isConnected: isConnected,
    storage: STORAGE_PATH
  });
});

/**
 * GET /stream/:matchId/:fileName
 * Stream file
 */
app.get('/stream/:matchId/:fileName', async (req, res) => {
  try {
    const { matchId, fileName } = req.params;
    const filePath = path.join(STORAGE_PATH, matchId, fileName);
    
    if (!existsSync(filePath)) {
      return res.status(404).json({ error: 'File kh√¥ng t·ªìn t·∫°i' });
    }
    
    // Stream file
    res.sendFile(filePath);
    
  } catch (error) {
    console.error('‚ùå L·ªói khi stream file:', error);
    res.status(500).json({ error: error.message });
  }
});

// Kh·ªüi ƒë·ªông server
const server = createServer(app);

server.listen(PORT, () => {
  console.log(`üöÄ Data Node Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
  console.log(`üìÅ Storage path: ${STORAGE_PATH}`);
  
  // Prompt user ƒë·ªÉ nh·∫≠p th√¥ng tin k·∫øt n·ªëi
  promptConnection();
});

/**
 * Prompt user nh·∫≠p th√¥ng tin k·∫øt n·ªëi
 */
async function promptConnection() {
  const readline = await import('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('Nh·∫≠p IP server ch√≠nh: ', (host) => {
    rl.question('Nh·∫≠p PORT server ch√≠nh: ', (port) => {
      rl.question('Nh·∫≠p t√™n Data Node: ', (name) => {
        rl.close();
        
        // K·∫øt n·ªëi t·ªõi server ch√≠nh
        connectToMainServer(host, port, name).catch(error => {
          console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server ch√≠nh:', error);
          process.exit(1);
        });
      });
    });
  });
}

